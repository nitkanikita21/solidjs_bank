datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
    provider        = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(MEMBER)
    cards         Card[]
}

enum Role {
    MEMBER
    OPERATOR
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Card {
    id              String        @id @default(cuid())
    owner           User          @relation(fields: [ownerId], references: [id])
    ownerId         String
    createTime      DateTime      @default(now())
    numericalId     String
    image           String?
    name            String
    balance         Int           @default(0)
    transactionFrom Transaction[] @relation("TransactionFromCard")
    transactionTo   Transaction[] @relation("TransactionToCard")

    @@unique([numericalId])
}

model Transaction {
    id      String          @id @default(cuid())
    type    TransactionType
    summ    Int
    reason  String
    date    DateTime        @default(now()) @db.Timestamp()
    comment String?

    fromCardId String
    fromCard   Card    @relation("TransactionFromCard", fields: [fromCardId], references: [id])
    toCardId   String?
    toCard     Card?   @relation("TransactionToCard", fields: [toCardId], references: [id])
}

enum TransactionType {
    TRANSFER
    SYSTEM
}
